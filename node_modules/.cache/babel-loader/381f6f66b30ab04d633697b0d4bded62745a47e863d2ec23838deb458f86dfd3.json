{"ast":null,"code":"export async function fetchWeatherByCoords(latitude, longitude) {\n  const params = new URLSearchParams({\n    latitude: latitude.toString(),\n    longitude: longitude.toString(),\n    current: ['temperature_2m', 'relative_humidity_2m', 'apparent_temperature', 'dew_point_2m', 'weather_code', 'precipitation', 'pressure_msl', 'surface_pressure', 'wind_speed_10m', 'wind_direction_10m', 'visibility'].join(','),\n    hourly: ['temperature_2m', 'relative_humidity_2m', 'precipitation_probability', 'precipitation'].join(','),\n    daily: ['temperature_2m_max', 'temperature_2m_min', 'precipitation_sum', 'sunrise', 'sunset', 'uv_index_max'].join(','),\n    timezone: 'auto'\n  });\n  const url = `https://api.open-meteo.com/v1/forecast?${params.toString()}`;\n  const res = await fetch(url);\n  if (!res.ok) throw new Error('Failed to fetch weather');\n  const json = await res.json();\n  return normalizeOpenMeteo(json);\n}\nfunction normalizeOpenMeteo(data) {\n  var _data$current, _data$hourly, _data$daily, _current$pressure_msl, _daily$sunrise, _daily$sunset, _daily$uv_index_max;\n  const current = (_data$current = data.current) !== null && _data$current !== void 0 ? _data$current : {};\n  const hourly = (_data$hourly = data.hourly) !== null && _data$hourly !== void 0 ? _data$hourly : {};\n  const daily = (_data$daily = data.daily) !== null && _data$daily !== void 0 ? _data$daily : {};\n  const hourlyItems = (hourly.time || []).slice(0, 7).map((t, i) => {\n    var _hourly$temperature_, _hourly$precipitation;\n    return {\n      time: new Date(t),\n      temp: (_hourly$temperature_ = hourly.temperature_2m) === null || _hourly$temperature_ === void 0 ? void 0 : _hourly$temperature_[i],\n      pop: (_hourly$precipitation = hourly.precipitation_probability) === null || _hourly$precipitation === void 0 ? void 0 : _hourly$precipitation[i]\n    };\n  });\n  const dailyItems = (daily.time || []).slice(0, 7).map((t, i) => {\n    var _daily$temperature_2m, _daily$temperature_2m2, _daily$precipitation_;\n    return {\n      date: new Date(t),\n      max: (_daily$temperature_2m = daily.temperature_2m_max) === null || _daily$temperature_2m === void 0 ? void 0 : _daily$temperature_2m[i],\n      min: (_daily$temperature_2m2 = daily.temperature_2m_min) === null || _daily$temperature_2m2 === void 0 ? void 0 : _daily$temperature_2m2[i],\n      precip: (_daily$precipitation_ = daily.precipitation_sum) === null || _daily$precipitation_ === void 0 ? void 0 : _daily$precipitation_[i]\n    };\n  });\n  return {\n    current: {\n      temp: current.temperature_2m,\n      feelsLike: current.apparent_temperature,\n      humidity: current.relative_humidity_2m,\n      windKmh: current.wind_speed_10m,\n      visibilityKm: current.visibility ? current.visibility / 1000 : undefined,\n      pressureMb: (_current$pressure_msl = current.pressure_msl) !== null && _current$pressure_msl !== void 0 ? _current$pressure_msl : current.surface_pressure,\n      dewPoint: current.dew_point_2m,\n      code: current.weather_code\n    },\n    hourly: hourlyItems,\n    daily: dailyItems,\n    sun: {\n      sunrise: (_daily$sunrise = daily.sunrise) !== null && _daily$sunrise !== void 0 && _daily$sunrise[0] ? new Date(daily.sunrise[0]) : undefined,\n      sunset: (_daily$sunset = daily.sunset) !== null && _daily$sunset !== void 0 && _daily$sunset[0] ? new Date(daily.sunset[0]) : undefined,\n      uvMax: (_daily$uv_index_max = daily.uv_index_max) === null || _daily$uv_index_max === void 0 ? void 0 : _daily$uv_index_max[0]\n    }\n  };\n}\nexport async function searchCities(query) {\n  if (!query || query.trim().length < 2) return [];\n  const params = new URLSearchParams({\n    name: query.trim(),\n    count: '8',\n    language: 'en',\n    format: 'json'\n  });\n  const url = `https://geocoding-api.open-meteo.com/v1/search?${params.toString()}`;\n  const res = await fetch(url);\n  if (!res.ok) return [];\n  const json = await res.json();\n  const results = json.results || [];\n  return results.map(r => ({\n    id: `${r.latitude},${r.longitude}`,\n    name: r.name,\n    country: r.country,\n    admin1: r.admin1,\n    latitude: r.latitude,\n    longitude: r.longitude\n  }));\n}\nexport async function fetchAirQualityByCoords(latitude, longitude) {\n  var _json$hourly, _json$hourly$european;\n  const params = new URLSearchParams({\n    latitude: latitude.toString(),\n    longitude: longitude.toString(),\n    hourly: ['european_aqi'].join(','),\n    timezone: 'auto'\n  });\n  const url = `https://air-quality-api.open-meteo.com/v1/air-quality?${params.toString()}`;\n  const res = await fetch(url);\n  if (!res.ok) return null;\n  const json = await res.json();\n  const idx = (_json$hourly = json.hourly) === null || _json$hourly === void 0 ? void 0 : (_json$hourly$european = _json$hourly.european_aqi) === null || _json$hourly$european === void 0 ? void 0 : _json$hourly$european[0];\n  return typeof idx === 'number' ? {\n    aqi: Math.round(idx),\n    level: aqiLevel(idx)\n  } : null;\n}\nfunction aqiLevel(aqi) {\n  if (aqi <= 20) return 'Low';\n  if (aqi <= 40) return 'Moderate';\n  if (aqi <= 60) return 'High';\n  if (aqi <= 80) return 'Very High';\n  return 'Extreme';\n}","map":{"version":3,"names":["fetchWeatherByCoords","latitude","longitude","params","URLSearchParams","toString","current","join","hourly","daily","timezone","url","res","fetch","ok","Error","json","normalizeOpenMeteo","data","_data$current","_data$hourly","_data$daily","_current$pressure_msl","_daily$sunrise","_daily$sunset","_daily$uv_index_max","hourlyItems","time","slice","map","t","i","_hourly$temperature_","_hourly$precipitation","Date","temp","temperature_2m","pop","precipitation_probability","dailyItems","_daily$temperature_2m","_daily$temperature_2m2","_daily$precipitation_","date","max","temperature_2m_max","min","temperature_2m_min","precip","precipitation_sum","feelsLike","apparent_temperature","humidity","relative_humidity_2m","windKmh","wind_speed_10m","visibilityKm","visibility","undefined","pressureMb","pressure_msl","surface_pressure","dewPoint","dew_point_2m","code","weather_code","sun","sunrise","sunset","uvMax","uv_index_max","searchCities","query","trim","length","name","count","language","format","results","r","id","country","admin1","fetchAirQualityByCoords","_json$hourly","_json$hourly$european","idx","european_aqi","aqi","Math","round","level","aqiLevel"],"sources":["C:/Users/Dell/weather/src/api.js"],"sourcesContent":["export async function fetchWeatherByCoords(latitude, longitude) {\r\n  const params = new URLSearchParams({\r\n    latitude: latitude.toString(),\r\n    longitude: longitude.toString(),\r\n    current: [\r\n      'temperature_2m',\r\n      'relative_humidity_2m',\r\n      'apparent_temperature',\r\n      'dew_point_2m',\r\n      'weather_code',\r\n      'precipitation',\r\n      'pressure_msl',\r\n      'surface_pressure',\r\n      'wind_speed_10m',\r\n      'wind_direction_10m',\r\n      'visibility'\r\n    ].join(','),\r\n    hourly: [\r\n      'temperature_2m',\r\n      'relative_humidity_2m',\r\n      'precipitation_probability',\r\n      'precipitation'\r\n    ].join(','),\r\n    daily: [\r\n      'temperature_2m_max',\r\n      'temperature_2m_min',\r\n      'precipitation_sum',\r\n      'sunrise',\r\n      'sunset',\r\n      'uv_index_max'\r\n    ].join(','),\r\n    timezone: 'auto'\r\n  });\r\n\r\n  const url = `https://api.open-meteo.com/v1/forecast?${params.toString()}`;\r\n  const res = await fetch(url);\r\n  if (!res.ok) throw new Error('Failed to fetch weather');\r\n  const json = await res.json();\r\n  return normalizeOpenMeteo(json);\r\n}\r\n\r\nfunction normalizeOpenMeteo(data) {\r\n  const current = data.current ?? {};\r\n  const hourly = data.hourly ?? {};\r\n  const daily = data.daily ?? {};\r\n\r\n  const hourlyItems = (hourly.time || []).slice(0, 7).map((t, i) => ({\r\n    time: new Date(t),\r\n    temp: hourly.temperature_2m?.[i],\r\n    pop: hourly.precipitation_probability?.[i],\r\n  }));\r\n\r\n  const dailyItems = (daily.time || []).slice(0, 7).map((t, i) => ({\r\n    date: new Date(t),\r\n    max: daily.temperature_2m_max?.[i],\r\n    min: daily.temperature_2m_min?.[i],\r\n    precip: daily.precipitation_sum?.[i]\r\n  }));\r\n\r\n  return {\r\n    current: {\r\n      temp: current.temperature_2m,\r\n      feelsLike: current.apparent_temperature,\r\n      humidity: current.relative_humidity_2m,\r\n      windKmh: current.wind_speed_10m,\r\n      visibilityKm: current.visibility ? (current.visibility / 1000) : undefined,\r\n      pressureMb: current.pressure_msl ?? current.surface_pressure,\r\n      dewPoint: current.dew_point_2m,\r\n      code: current.weather_code\r\n    },\r\n    hourly: hourlyItems,\r\n    daily: dailyItems,\r\n    sun: {\r\n      sunrise: daily.sunrise?.[0] ? new Date(daily.sunrise[0]) : undefined,\r\n      sunset: daily.sunset?.[0] ? new Date(daily.sunset[0]) : undefined,\r\n      uvMax: daily.uv_index_max?.[0]\r\n    }\r\n  };\r\n}\r\n\r\nexport async function searchCities(query) {\r\n  if (!query || query.trim().length < 2) return [];\r\n  const params = new URLSearchParams({\r\n    name: query.trim(),\r\n    count: '8',\r\n    language: 'en',\r\n    format: 'json'\r\n  });\r\n  const url = `https://geocoding-api.open-meteo.com/v1/search?${params.toString()}`;\r\n  const res = await fetch(url);\r\n  if (!res.ok) return [];\r\n  const json = await res.json();\r\n  const results = json.results || [];\r\n  return results.map(r => ({\r\n    id: `${r.latitude},${r.longitude}`,\r\n    name: r.name,\r\n    country: r.country,\r\n    admin1: r.admin1,\r\n    latitude: r.latitude,\r\n    longitude: r.longitude\r\n  }));\r\n}\r\n\r\nexport async function fetchAirQualityByCoords(latitude, longitude) {\r\n  const params = new URLSearchParams({\r\n    latitude: latitude.toString(),\r\n    longitude: longitude.toString(),\r\n    hourly: ['european_aqi'].join(','),\r\n    timezone: 'auto'\r\n  });\r\n  const url = `https://air-quality-api.open-meteo.com/v1/air-quality?${params.toString()}`;\r\n  const res = await fetch(url);\r\n  if (!res.ok) return null;\r\n  const json = await res.json();\r\n  const idx = json.hourly?.european_aqi?.[0];\r\n  return typeof idx === 'number' ? { aqi: Math.round(idx), level: aqiLevel(idx) } : null;\r\n}\r\n\r\nfunction aqiLevel(aqi) {\r\n  if (aqi <= 20) return 'Low';\r\n  if (aqi <= 40) return 'Moderate';\r\n  if (aqi <= 60) return 'High';\r\n  if (aqi <= 80) return 'Very High';\r\n  return 'Extreme';\r\n}\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}