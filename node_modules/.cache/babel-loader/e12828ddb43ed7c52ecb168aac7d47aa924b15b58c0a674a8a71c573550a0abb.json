{"ast":null,"code":"export async function fetchWeatherByCoords(latitude,longitude){const params=new URLSearchParams({latitude:latitude.toString(),longitude:longitude.toString(),current:['temperature_2m','relative_humidity_2m','apparent_temperature','dew_point_2m','weather_code','precipitation','pressure_msl','surface_pressure','wind_speed_10m','wind_direction_10m','visibility'].join(','),hourly:['temperature_2m','relative_humidity_2m','precipitation_probability','precipitation'].join(','),daily:['temperature_2m_max','temperature_2m_min','precipitation_sum','sunrise','sunset','uv_index_max'].join(','),timezone:'auto'});const url=\"https://api.open-meteo.com/v1/forecast?\".concat(params.toString());const res=await fetch(url);if(!res.ok)throw new Error('Failed to fetch weather');const json=await res.json();return normalizeOpenMeteo(json);}function normalizeOpenMeteo(data){var _data$current,_data$hourly,_data$daily,_current$pressure_msl,_daily$sunrise,_daily$sunset,_daily$uv_index_max;const current=(_data$current=data.current)!==null&&_data$current!==void 0?_data$current:{};const hourly=(_data$hourly=data.hourly)!==null&&_data$hourly!==void 0?_data$hourly:{};const daily=(_data$daily=data.daily)!==null&&_data$daily!==void 0?_data$daily:{};const hourlyItems=(hourly.time||[]).slice(0,7).map((t,i)=>{var _hourly$temperature_,_hourly$precipitation;return{time:new Date(t),temp:(_hourly$temperature_=hourly.temperature_2m)===null||_hourly$temperature_===void 0?void 0:_hourly$temperature_[i],pop:(_hourly$precipitation=hourly.precipitation_probability)===null||_hourly$precipitation===void 0?void 0:_hourly$precipitation[i]};});const dailyItems=(daily.time||[]).slice(0,7).map((t,i)=>{var _daily$temperature_2m,_daily$temperature_2m2,_daily$precipitation_;return{date:new Date(t),max:(_daily$temperature_2m=daily.temperature_2m_max)===null||_daily$temperature_2m===void 0?void 0:_daily$temperature_2m[i],min:(_daily$temperature_2m2=daily.temperature_2m_min)===null||_daily$temperature_2m2===void 0?void 0:_daily$temperature_2m2[i],precip:(_daily$precipitation_=daily.precipitation_sum)===null||_daily$precipitation_===void 0?void 0:_daily$precipitation_[i]};});return{current:{temp:current.temperature_2m,feelsLike:current.apparent_temperature,humidity:current.relative_humidity_2m,windKmh:current.wind_speed_10m,visibilityKm:current.visibility?current.visibility/1000:undefined,pressureMb:(_current$pressure_msl=current.pressure_msl)!==null&&_current$pressure_msl!==void 0?_current$pressure_msl:current.surface_pressure,dewPoint:current.dew_point_2m,code:current.weather_code},hourly:hourlyItems,daily:dailyItems,sun:{sunrise:(_daily$sunrise=daily.sunrise)!==null&&_daily$sunrise!==void 0&&_daily$sunrise[0]?new Date(daily.sunrise[0]):undefined,sunset:(_daily$sunset=daily.sunset)!==null&&_daily$sunset!==void 0&&_daily$sunset[0]?new Date(daily.sunset[0]):undefined,uvMax:(_daily$uv_index_max=daily.uv_index_max)===null||_daily$uv_index_max===void 0?void 0:_daily$uv_index_max[0]}};}export async function searchCities(query){if(!query||query.trim().length<2)return[];const params=new URLSearchParams({name:query.trim(),count:'8',language:'en',format:'json'});const url=\"https://geocoding-api.open-meteo.com/v1/search?\".concat(params.toString());const res=await fetch(url);if(!res.ok)return[];const json=await res.json();const results=json.results||[];return results.map(r=>({id:\"\".concat(r.latitude,\",\").concat(r.longitude),name:r.name,country:r.country,admin1:r.admin1,latitude:r.latitude,longitude:r.longitude}));}export async function fetchAirQualityByCoords(latitude,longitude){var _json$hourly,_json$hourly$european;const params=new URLSearchParams({latitude:latitude.toString(),longitude:longitude.toString(),hourly:['european_aqi'].join(','),timezone:'auto'});const url=\"https://air-quality-api.open-meteo.com/v1/air-quality?\".concat(params.toString());const res=await fetch(url);if(!res.ok)return null;const json=await res.json();const idx=(_json$hourly=json.hourly)===null||_json$hourly===void 0?void 0:(_json$hourly$european=_json$hourly.european_aqi)===null||_json$hourly$european===void 0?void 0:_json$hourly$european[0];return typeof idx==='number'?{aqi:Math.round(idx),level:aqiLevel(idx)}:null;}function aqiLevel(aqi){if(aqi<=20)return'Low';if(aqi<=40)return'Moderate';if(aqi<=60)return'High';if(aqi<=80)return'Very High';return'Extreme';}","map":{"version":3,"names":["fetchWeatherByCoords","latitude","longitude","params","URLSearchParams","toString","current","join","hourly","daily","timezone","url","concat","res","fetch","ok","Error","json","normalizeOpenMeteo","data","_data$current","_data$hourly","_data$daily","_current$pressure_msl","_daily$sunrise","_daily$sunset","_daily$uv_index_max","hourlyItems","time","slice","map","t","i","_hourly$temperature_","_hourly$precipitation","Date","temp","temperature_2m","pop","precipitation_probability","dailyItems","_daily$temperature_2m","_daily$temperature_2m2","_daily$precipitation_","date","max","temperature_2m_max","min","temperature_2m_min","precip","precipitation_sum","feelsLike","apparent_temperature","humidity","relative_humidity_2m","windKmh","wind_speed_10m","visibilityKm","visibility","undefined","pressureMb","pressure_msl","surface_pressure","dewPoint","dew_point_2m","code","weather_code","sun","sunrise","sunset","uvMax","uv_index_max","searchCities","query","trim","length","name","count","language","format","results","r","id","country","admin1","fetchAirQualityByCoords","_json$hourly","_json$hourly$european","idx","european_aqi","aqi","Math","round","level","aqiLevel"],"sources":["C:/Users/Dell/weather/src/api.js"],"sourcesContent":["export async function fetchWeatherByCoords(latitude, longitude) {\r\n  const params = new URLSearchParams({\r\n    latitude: latitude.toString(),\r\n    longitude: longitude.toString(),\r\n    current: [\r\n      'temperature_2m',\r\n      'relative_humidity_2m',\r\n      'apparent_temperature',\r\n      'dew_point_2m',\r\n      'weather_code',\r\n      'precipitation',\r\n      'pressure_msl',\r\n      'surface_pressure',\r\n      'wind_speed_10m',\r\n      'wind_direction_10m',\r\n      'visibility'\r\n    ].join(','),\r\n    hourly: [\r\n      'temperature_2m',\r\n      'relative_humidity_2m',\r\n      'precipitation_probability',\r\n      'precipitation'\r\n    ].join(','),\r\n    daily: [\r\n      'temperature_2m_max',\r\n      'temperature_2m_min',\r\n      'precipitation_sum',\r\n      'sunrise',\r\n      'sunset',\r\n      'uv_index_max'\r\n    ].join(','),\r\n    timezone: 'auto'\r\n  });\r\n\r\n  const url = `https://api.open-meteo.com/v1/forecast?${params.toString()}`;\r\n  const res = await fetch(url);\r\n  if (!res.ok) throw new Error('Failed to fetch weather');\r\n  const json = await res.json();\r\n  return normalizeOpenMeteo(json);\r\n}\r\n\r\nfunction normalizeOpenMeteo(data) {\r\n  const current = data.current ?? {};\r\n  const hourly = data.hourly ?? {};\r\n  const daily = data.daily ?? {};\r\n\r\n  const hourlyItems = (hourly.time || []).slice(0, 7).map((t, i) => ({\r\n    time: new Date(t),\r\n    temp: hourly.temperature_2m?.[i],\r\n    pop: hourly.precipitation_probability?.[i],\r\n  }));\r\n\r\n  const dailyItems = (daily.time || []).slice(0, 7).map((t, i) => ({\r\n    date: new Date(t),\r\n    max: daily.temperature_2m_max?.[i],\r\n    min: daily.temperature_2m_min?.[i],\r\n    precip: daily.precipitation_sum?.[i]\r\n  }));\r\n\r\n  return {\r\n    current: {\r\n      temp: current.temperature_2m,\r\n      feelsLike: current.apparent_temperature,\r\n      humidity: current.relative_humidity_2m,\r\n      windKmh: current.wind_speed_10m,\r\n      visibilityKm: current.visibility ? (current.visibility / 1000) : undefined,\r\n      pressureMb: current.pressure_msl ?? current.surface_pressure,\r\n      dewPoint: current.dew_point_2m,\r\n      code: current.weather_code\r\n    },\r\n    hourly: hourlyItems,\r\n    daily: dailyItems,\r\n    sun: {\r\n      sunrise: daily.sunrise?.[0] ? new Date(daily.sunrise[0]) : undefined,\r\n      sunset: daily.sunset?.[0] ? new Date(daily.sunset[0]) : undefined,\r\n      uvMax: daily.uv_index_max?.[0]\r\n    }\r\n  };\r\n}\r\n\r\nexport async function searchCities(query) {\r\n  if (!query || query.trim().length < 2) return [];\r\n  const params = new URLSearchParams({\r\n    name: query.trim(),\r\n    count: '8',\r\n    language: 'en',\r\n    format: 'json'\r\n  });\r\n  const url = `https://geocoding-api.open-meteo.com/v1/search?${params.toString()}`;\r\n  const res = await fetch(url);\r\n  if (!res.ok) return [];\r\n  const json = await res.json();\r\n  const results = json.results || [];\r\n  return results.map(r => ({\r\n    id: `${r.latitude},${r.longitude}`,\r\n    name: r.name,\r\n    country: r.country,\r\n    admin1: r.admin1,\r\n    latitude: r.latitude,\r\n    longitude: r.longitude\r\n  }));\r\n}\r\n\r\nexport async function fetchAirQualityByCoords(latitude, longitude) {\r\n  const params = new URLSearchParams({\r\n    latitude: latitude.toString(),\r\n    longitude: longitude.toString(),\r\n    hourly: ['european_aqi'].join(','),\r\n    timezone: 'auto'\r\n  });\r\n  const url = `https://air-quality-api.open-meteo.com/v1/air-quality?${params.toString()}`;\r\n  const res = await fetch(url);\r\n  if (!res.ok) return null;\r\n  const json = await res.json();\r\n  const idx = json.hourly?.european_aqi?.[0];\r\n  return typeof idx === 'number' ? { aqi: Math.round(idx), level: aqiLevel(idx) } : null;\r\n}\r\n\r\nfunction aqiLevel(aqi) {\r\n  if (aqi <= 20) return 'Low';\r\n  if (aqi <= 40) return 'Moderate';\r\n  if (aqi <= 60) return 'High';\r\n  if (aqi <= 80) return 'Very High';\r\n  return 'Extreme';\r\n}\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}