{"ast":null,"code":"export async function fetchWeatherByCoords(latitude, longitude) {\n  const params = new URLSearchParams({\n    latitude: latitude.toString(),\n    longitude: longitude.toString(),\n    current: ['temperature_2m', 'relative_humidity_2m', 'apparent_temperature', 'weather_code', 'precipitation', 'pressure_msl', 'surface_pressure', 'wind_speed_10m', 'wind_direction_10m', 'visibility'].join(','),\n    hourly: ['temperature_2m', 'relative_humidity_2m', 'precipitation_probability', 'precipitation'].join(','),\n    daily: ['temperature_2m_max', 'temperature_2m_min', 'precipitation_sum'].join(','),\n    timezone: 'auto'\n  });\n  const url = `https://api.open-meteo.com/v1/forecast?${params.toString()}`;\n  const res = await fetch(url);\n  if (!res.ok) throw new Error('Failed to fetch weather');\n  const json = await res.json();\n  return normalizeOpenMeteo(json);\n}\nfunction normalizeOpenMeteo(data) {\n  var _data$current, _data$hourly, _data$daily, _current$pressure_msl;\n  const current = (_data$current = data.current) !== null && _data$current !== void 0 ? _data$current : {};\n  const hourly = (_data$hourly = data.hourly) !== null && _data$hourly !== void 0 ? _data$hourly : {};\n  const daily = (_data$daily = data.daily) !== null && _data$daily !== void 0 ? _data$daily : {};\n  const hourlyItems = (hourly.time || []).slice(0, 7).map((t, i) => {\n    var _hourly$temperature_, _hourly$precipitation;\n    return {\n      time: new Date(t),\n      temp: (_hourly$temperature_ = hourly.temperature_2m) === null || _hourly$temperature_ === void 0 ? void 0 : _hourly$temperature_[i],\n      pop: (_hourly$precipitation = hourly.precipitation_probability) === null || _hourly$precipitation === void 0 ? void 0 : _hourly$precipitation[i]\n    };\n  });\n  const dailyItems = (daily.time || []).slice(0, 7).map((t, i) => {\n    var _daily$temperature_2m, _daily$temperature_2m2, _daily$precipitation_;\n    return {\n      date: new Date(t),\n      max: (_daily$temperature_2m = daily.temperature_2m_max) === null || _daily$temperature_2m === void 0 ? void 0 : _daily$temperature_2m[i],\n      min: (_daily$temperature_2m2 = daily.temperature_2m_min) === null || _daily$temperature_2m2 === void 0 ? void 0 : _daily$temperature_2m2[i],\n      precip: (_daily$precipitation_ = daily.precipitation_sum) === null || _daily$precipitation_ === void 0 ? void 0 : _daily$precipitation_[i]\n    };\n  });\n  return {\n    current: {\n      temp: current.temperature_2m,\n      feelsLike: current.apparent_temperature,\n      humidity: current.relative_humidity_2m,\n      windKmh: current.wind_speed_10m,\n      visibilityKm: current.visibility ? current.visibility / 1000 : undefined,\n      pressureMb: (_current$pressure_msl = current.pressure_msl) !== null && _current$pressure_msl !== void 0 ? _current$pressure_msl : current.surface_pressure,\n      code: current.weather_code\n    },\n    hourly: hourlyItems,\n    daily: dailyItems\n  };\n}","map":{"version":3,"names":["fetchWeatherByCoords","latitude","longitude","params","URLSearchParams","toString","current","join","hourly","daily","timezone","url","res","fetch","ok","Error","json","normalizeOpenMeteo","data","_data$current","_data$hourly","_data$daily","_current$pressure_msl","hourlyItems","time","slice","map","t","i","_hourly$temperature_","_hourly$precipitation","Date","temp","temperature_2m","pop","precipitation_probability","dailyItems","_daily$temperature_2m","_daily$temperature_2m2","_daily$precipitation_","date","max","temperature_2m_max","min","temperature_2m_min","precip","precipitation_sum","feelsLike","apparent_temperature","humidity","relative_humidity_2m","windKmh","wind_speed_10m","visibilityKm","visibility","undefined","pressureMb","pressure_msl","surface_pressure","code","weather_code"],"sources":["C:/Users/Dell/weather/src/api.js"],"sourcesContent":["export async function fetchWeatherByCoords(latitude, longitude) {\r\n  const params = new URLSearchParams({\r\n    latitude: latitude.toString(),\r\n    longitude: longitude.toString(),\r\n    current: [\r\n      'temperature_2m',\r\n      'relative_humidity_2m',\r\n      'apparent_temperature',\r\n      'weather_code',\r\n      'precipitation',\r\n      'pressure_msl',\r\n      'surface_pressure',\r\n      'wind_speed_10m',\r\n      'wind_direction_10m',\r\n      'visibility'\r\n    ].join(','),\r\n    hourly: [\r\n      'temperature_2m',\r\n      'relative_humidity_2m',\r\n      'precipitation_probability',\r\n      'precipitation'\r\n    ].join(','),\r\n    daily: [\r\n      'temperature_2m_max',\r\n      'temperature_2m_min',\r\n      'precipitation_sum'\r\n    ].join(','),\r\n    timezone: 'auto'\r\n  });\r\n\r\n  const url = `https://api.open-meteo.com/v1/forecast?${params.toString()}`;\r\n  const res = await fetch(url);\r\n  if (!res.ok) throw new Error('Failed to fetch weather');\r\n  const json = await res.json();\r\n  return normalizeOpenMeteo(json);\r\n}\r\n\r\nfunction normalizeOpenMeteo(data) {\r\n  const current = data.current ?? {};\r\n  const hourly = data.hourly ?? {};\r\n  const daily = data.daily ?? {};\r\n\r\n  const hourlyItems = (hourly.time || []).slice(0, 7).map((t, i) => ({\r\n    time: new Date(t),\r\n    temp: hourly.temperature_2m?.[i],\r\n    pop: hourly.precipitation_probability?.[i],\r\n  }));\r\n\r\n  const dailyItems = (daily.time || []).slice(0, 7).map((t, i) => ({\r\n    date: new Date(t),\r\n    max: daily.temperature_2m_max?.[i],\r\n    min: daily.temperature_2m_min?.[i],\r\n    precip: daily.precipitation_sum?.[i]\r\n  }));\r\n\r\n  return {\r\n    current: {\r\n      temp: current.temperature_2m,\r\n      feelsLike: current.apparent_temperature,\r\n      humidity: current.relative_humidity_2m,\r\n      windKmh: current.wind_speed_10m,\r\n      visibilityKm: current.visibility ? (current.visibility / 1000) : undefined,\r\n      pressureMb: current.pressure_msl ?? current.surface_pressure,\r\n      code: current.weather_code\r\n    },\r\n    hourly: hourlyItems,\r\n    daily: dailyItems\r\n  };\r\n}\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}